@model IEnumerable<bb.Models.Cart>

@{
    ViewData["Title"] = "Shopping Cart";
  
    decimal totalSum = Model?.Sum(item => item.Quantity * (decimal)(item.Product?.Price ?? 0)) ?? 0;
}


<link href="https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;600&display=swap" rel="stylesheet">


<style>
    :root {
        --color-bg: #ffffff;
        --color-text: #000000;
        --color-border: #e0e0e0;
    }

    body {
        font-family: 'Poppins', sans-serif;
        background-color: var(--color-bg);
        color: var(--color-text);
        margin: 0;
        padding: 0;
    }

    h1 {
        font-weight: 600;
    }

    .container {
        margin-top: 30px;
    }
    /* Product Card Styles */
    .product-card {
        margin-bottom: 15px;
        background-color: var(--color-bg);
        border: 1px solid var(--color-border);
        border-radius: 12px;
        overflow: hidden;
        transition: transform 0.3s ease, box-shadow 0.3s ease;
    }

        .product-card:hover {
            transform: translateY(-3px);
            box-shadow: 0 8px 16px rgba(0,0,0,0.08);
        }

        .product-card img {
            height: 120px;
            width: 100%;
            object-fit: cover;
        }

        .product-card .card-body {
            padding: 10px 15px;
        }

        .product-card .card-title {
            font-size: 0.95rem;
            margin-bottom: 5px;
            font-weight: 500;
        }

        .product-card .card-text {
            font-size: 0.85rem;
            margin-bottom: 10px;
        }

        .product-card .btn-outline-danger {
            font-size: 0.75rem;
            padding: 4px 8px;
            border-color: var(--color-border);
            color: var(--color-text);
            transition: background 0.3s ease, color 0.3s ease;
        }

            .product-card .btn-outline-danger:hover {
                background-color: var(--color-text);
                color: var(--color-bg);
            }
    /* Checkout Summary Styles */
    .checkout-card {
        background-color: var(--color-text);
        color: var(--color-bg);
        border: none;
        border-radius: 12px;
        padding: 30px 20px;
        box-shadow: 0 8px 16px rgba(0,0,0,0.15);
        position: relative;
        overflow: hidden;
        transition: transform 0.3s ease;
        border-left: 4px solid var(--color-bg);
    }

        .checkout-card:hover {
            transform: translateY(-5px);
        }

        .checkout-card .random-bg {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 3rem;
            font-weight: 600;
            opacity: 0;
            transition: opacity 0.3s ease;
            pointer-events: none;
            color: rgba(255, 255, 255, 0.2);
        }

        .checkout-card:hover .random-bg {
            opacity: 1;
        }

        .checkout-card h4 {
            margin: 0 0 15px;
            font-size: 1.6rem;
            font-weight: 600;
            position: relative;
            z-index: 1;
        }

 
    .btn-checkout {
        background-color: #ffffff; 
        border: 2px solid #000000; 
        color: #000000;
        padding: 12px 30px;
        border-radius: 4px;
        font-weight: 600;
        text-transform: uppercase;
        cursor: pointer;
        transition: background 0.3s ease, color 0.3s ease;
    }

        .btn-checkout:hover {
            background-color: #000000; 
            color: #ffffff; 
        }

    /* Responsive Layout */
    @@media (max-width: 767.98px) {
        .checkout-card, .product-card {
            margin-bottom: 20px;
        }
    }
</style>

<h1 class="mb-4 text-center">YOUR SHOPPING CART</h1>

@if (Model == null || !Model.Any())
{
    <div class="alert alert-info text-center">
        Your cart is empty.
    </div>
}
else
{
    <div class="container">
        <div class="row">
            <!-- Left Column: Product List -->
            <div class="col-md-8">
                @foreach (var item in Model)
                {
                    <div class="card product-card">
                        <div class="row g-0">
                            <div class="col-4">
                                <img src="@item.Product?.ImageUrl" alt="@item.Product?.Title" class="img-fluid">
                            </div>
                            <div class="col-8">
                                <div class="card-body">
                                    <h5 class="card-title">@item.Product?.Title</h5>
                                    <p class="card-text">
                                        Quantity: @item.Quantity<br />
                                        Total: $@((decimal)item.Quantity * (decimal)(item.Product?.Price ?? 0))
                                    </p>
                                    <a asp-action="Remove" asp-route-productId="@item.ProductId" class="btn btn-sm btn-outline-danger">
                                        Remove
                                    </a>
                                </div>
                            </div>
                        </div>
                    </div>
                }
            </div>
            <!-- Right Column: Checkout Summary -->
            <div class="col-md-4">
                <div class="card checkout-card">
                    <div class="random-bg"></div>
                    <div class="card-body d-flex flex-column justify-content-center align-items-center">
                        <h4>Total: <strong>$@totalSum</strong></h4>
                        <!-- Checkout button triggers the Stripe integration -->
                        <button id="checkout-button" type="button" class="btn btn-checkout mt-4">
                            Proceed to Checkout
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </div>
}

<!-- Include Stripe JS -->
<script src="https://js.stripe.com/v3/"></script>

<!-- JavaScript to set random background text -->
<script>
    document.addEventListener("DOMContentLoaded", function() {
        var randomTexts = ["SALE", "LIMITED OFFER", "SPECIAL", "CHECKOUT", "EXCLUSIVE"];
        var randomTextElement = document.querySelector(".checkout-card .random-bg");
        if (randomTextElement) {
            var randomIndex = Math.floor(Math.random() * randomTexts.length);
            randomTextElement.textContent = randomTexts[randomIndex];
        }
    });
</script>

<!-- Stripe Checkout Integration Script -->
<script>
    // Check that the publishable key is being passed correctly.
    console.log("Publishable Key:", '@ViewData["PublishableKey"]');

    // Initialize Stripe with your publishable key.
    var stripe = Stripe('@ViewData["PublishableKey"]');

    // Generate the correct URL for the CreateCheckoutSession action.
    var checkoutUrl = '@Url.Action("CreateCheckoutSession", "Payment", new { area = "Customer" })';
    console.log("Checkout URL: " + checkoutUrl);

    document.getElementById("checkout-button").addEventListener("click", async function () {
        try {
            const response = await fetch(checkoutUrl, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ })
            });
            const session = await response.json();
            console.log("Session:", session);

            stripe.redirectToCheckout({ sessionId: session.sessionId })
                .then(function(result) {
                    if (result.error) {
                        console.error("Stripe redirect error:", result.error.message);
                    }
                });
        } catch (error) {
            console.error("Fetch error:", error);
        }
    });
</script>
